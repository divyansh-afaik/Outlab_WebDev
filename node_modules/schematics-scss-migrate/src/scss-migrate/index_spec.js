"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@angular-devkit/schematics/testing");
const path = require("path");
const collectionPath = path.join(__dirname, '../collection.json');
const runner = new testing_1.SchematicTestRunner('schematics', collectionPath);
let appTree;
describe('scss-migrate', () => {
    beforeEach(() => __awaiter(void 0, void 0, void 0, function* () {
        appTree = yield runner.runExternalSchematicAsync('@schematics/angular', 'workspace', {
            name: 'scss-migrate-workspace',
            version: '1',
        }).toPromise();
        appTree = yield runner.runExternalSchematicAsync('@schematics/angular', 'application', {
            name: 'scss-migrate-app',
            defaultProject: 'scss-migrate-app',
            projects: {
                ['scss-migrate-app']: {
                    schematics: {
                        ['@schematics/angular:component']: {
                            "style": "css"
                        }
                    }
                }
            }
        }, appTree).toPromise();
    }));
    it('should be an Angular workspace with an angular.json file', () => __awaiter(void 0, void 0, void 0, function* () {
        const tree = yield runner.runSchematicAsync('scss-migrate', { cssFilesGlob: [] }, appTree).toPromise();
        expect(tree.exists('/angular.json')).toBeTruthy();
    }));
    it('should not rename .css file extensions without .css files glob', () => __awaiter(void 0, void 0, void 0, function* () {
        const tree = yield runner.runSchematicAsync('scss-migrate', { cssFilesGlob: [] }, appTree).toPromise();
        expect(tree.readContent('/scss-migrate-app/src/app/app.component.ts').toString().includes('app.component.css')).toBeTruthy();
        expect(tree.exists('/scss-migrate-app/src/app/app.component.css')).toBeTruthy();
    }));
    it('should rename .css file extension when glob provided', () => __awaiter(void 0, void 0, void 0, function* () {
        const tree = yield runner.runSchematicAsync('scss-migrate', { cssFilesGlob: ['/scss-migrate-app/src/app/app.component.css'] }, appTree).toPromise();
        expect(tree.readContent('/scss-migrate-app/src/app/app.component.ts').toString().includes('app.component.scss')).toBeTruthy();
        expect(tree.exists('/scss-migrate-app/src/app/app.component.scss')).toBeTruthy();
    }));
    it('should update component styles schematics in the angular.json file', () => __awaiter(void 0, void 0, void 0, function* () {
        const tree = yield runner.runSchematicAsync('scss-migrate', { cssFilesGlob: ['/scss-migrate-app/src/app/app.component.css'] }, appTree).toPromise();
        const projectWorkSpace = JSON.parse(tree.readContent('/angular.json').toString());
        const schematics = projectWorkSpace.projects['scss-migrate-app'].schematics;
        expect(schematics['@schematics/angular:component'].style).toBe('scss');
    }));
    it('should rename styles.css references to styles.scss in the angular.json file', () => __awaiter(void 0, void 0, void 0, function* () {
        const tree = yield runner.runSchematicAsync('scss-migrate', { cssFilesGlob: ['/scss-migrate-app/src/app/app.component.css'] }, appTree).toPromise();
        const projectWorkSpace = tree.readContent('/angular.json').toString();
        expect(projectWorkSpace.includes('styles.css')).toBeFalse();
        expect(projectWorkSpace.includes('styles.scss')).toBeTruthy();
    }));
    it('should rename styles.css to styles.scss', () => __awaiter(void 0, void 0, void 0, function* () {
        const tree = yield runner.runSchematicAsync('scss-migrate', { cssFilesGlob: ['/scss-migrate-app/src/app/app.component.css'] }, appTree).toPromise();
        expect(tree.exists('/scss-migrate-app/src/styles.css')).toBeFalse();
        expect(tree.exists('/scss-migrate-app/src/styles.scss')).toBeTruthy();
    }));
});
